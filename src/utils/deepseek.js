const axios = require('axios');

// Configuration pour l'API Ollama
// const OLLAMA_API_URL = process.env.OLLAMA_API_URL || 'http://localhost:11434/api';
// const MODEL_NAME = process.env.DEEPSEEK_MODEL || 'deepseek-r1:1.5b';

// class DeepSeekAI {
//     constructor() {
//         this.apiUrl = OLLAMA_API_URL;
//         this.model = MODEL_NAME;
//     }
//
//     /**
//      * Envoie une requ√™te √† l'API Ollama
//      * @param {string} prompt - Le prompt √† envoyer au mod√®le
//      * @returns {Promise<string>} - La r√©ponse du mod√®le
//      */
//     async generateResponse(prompt) {
//         try {
//             const response = await axios.post(`${this.apiUrl}/generate`, {
//                 model: this.model,
//                 prompt,
//                 stream: false
//             });
//
//             return response.data.response;
//         } catch (error) {
//             console.error('Erreur lors de la communication avec Ollama:', error.message);
//             throw new Error('√âchec de la communication avec le service d\'IA');
//         }
//     }


// Configuration pour OpenRouter
const OPENROUTER_API_URL = process.env.OPENROUTER_API_URL || "https://openrouter.ai/api/v1";
const API_KEY = process.env.OPENROUTER_API_KEY;
const MODEL_NAME = process.env.DEEPSEEK_MODEL || "deepseek-coder";

class DeepSeekAI {
    constructor() {
        this.apiUrl = OPENROUTER_API_URL;
        this.model = MODEL_NAME;
    }

    /**
     * Envoie une requ√™te √† l'API OpenRouter
     * @param {string} prompt - Le prompt √† envoyer au mod√®le
     * @returns {Promise<string>} - La r√©ponse du mod√®le
     */
    async generateResponse(prompt) {
        try {
            const response = await axios.post(
                `${this.apiUrl}/chat/completions`,
                {
                    model: this.model,
                    messages: [{ role: "system", content: "Tu es un assistant intelligent pour l'√©valuation d'examens SQL." },
                        { role: "user", content: prompt }]
                },
                {
                    headers: {
                        Authorization: `Bearer ${API_KEY}`,
                        "Content-Type": "application/json"
                    }
                }
            );

            return response.data.choices[0].message.content;
        } catch (error) {
            console.error("Erreur lors de la communication avec OpenRouter:", error.message);
            throw new Error("√âchec de la communication avec OpenRouter.");
        }
    }

    /**
     * G√©n√®re une correction pour un examen de base de donn√©es √† partir du texte extrait
     * @param {string} extractedText - Texte extrait du fichier d'examen
     * @param {string|object} gradingCriteria - Crit√®res d'√©valuation et bar√®me fournis par le professeur
     * @returns {Promise<string>} - Contenu de la correction g√©n√©r√©e
     */
    async generateCorrection(extractedText, gradingCriteria) {
        // Transformer les crit√®res en format string s'ils sont fournis en tant qu'objet
        let criteriaText = gradingCriteria;
        if (typeof gradingCriteria === 'object') {
            criteriaText = JSON.stringify(gradingCriteria, null, 2);
        }

        const prompt = `
Tu es un **correcteur expert en bases de donn√©es**, sp√©cialis√© dans l'√©laboration de corrections d'examens.  
Tu dois g√©n√©rer une **correction d√©taill√©e et p√©dagogique** √† partir du contenu de l'examen fourni.  

üìå **IMPORTANT :**  
- **Tu dois r√©pondre exclusivement en fran√ßais**.  
- **Formate ta correction de mani√®re structur√©e**, avec des explications claires pour chaque question.  
- **La note par d√©faut est sur 20**, mais le professeur peut avoir d√©fini un bar√®me diff√©rent (ex: /40, /100).  
  Tu dois toujours **ajuster l'√©valuation en fonction du bar√®me fourni** pour garantir une notation coh√©rente.  

üîé **CONTENU DE L'EXAMEN :**  
${extractedText}

üìå **CRIT√àRES D'√âVALUATION ET BAR√àME :**  
${criteriaText}

---

üìù **üîπ Structure attendue pour la correction :**  

### **1Ô∏è‚É£ Questions SQL**  
- **Requ√™te correcte** : Fournis la solution SQL optimale.  
- **Explication d√©taill√©e** : D√©cris la logique de la requ√™te, ses √©tapes et son fonctionnement.  
- **Commentaires techniques** : Explique les jointures, les groupements, l'optimisation de la requ√™te.  
- **Erreurs courantes** : Indique les erreurs fr√©quentes et comment les √©viter.  
- **Notation** : Attribue des points **en respectant le bar√®me sp√©cifi√©**.  

### **2Ô∏è‚É£ Questions de mod√©lisation**  
- **Sch√©ma relationnel** : Propose le mod√®le correct avec les entit√©s et relations appropri√©es.  
- **Explication des choix** : Justifie les cl√©s primaires, √©trang√®res et la normalisation appliqu√©e.  
- **Correction des erreurs courantes** : Pr√©cise les fautes classiques et comment les √©viter.  
- **Notation** : Ajuste la note selon le bar√®me fourni par le professeur.  

---

üéØ **Objectif** :  
Fournis une **correction compl√®te, structur√©e et p√©dagogique** pour chaque question, en expliquant **pourquoi** une r√©ponse est correcte ou incorrecte.  
Respecte les crit√®res d'√©valuation fournis par le professeur, **en adaptant l'attribution des points au bar√®me d√©fini**.  
`;


        try {
            const correctionContent = await this.generateResponse(prompt);
            return correctionContent;
        } catch (error) {
            console.error('Erreur lors de la g√©n√©ration de la correction:', error.message);
            return "Une erreur est survenue lors de la g√©n√©ration de la correction automatique. Veuillez r√©essayer ou contacter un administrateur.";
        }
    }


//     async gradeSubmission(studentQuery, correctSolution) {
//         const prompt = `
// Tu es un √©valuateur expert en SQL. Compare la requ√™te de l'√©tudiant avec la solution correcte et √©value-la selon les crit√®res suivants:
// 1. Syntaxe correcte
// 2. R√©sultat fonctionnellement √©quivalent
// 3. Efficacit√© et optimisation
// 4. Bonnes pratiques
//
// Requ√™te de l'√©tudiant:
// \`\`\`sql
// ${studentQuery}
// \`\`\`
//
// Solution correcte:
// \`\`\`sql
// ${correctSolution}
// \`\`\`
//
// IMPORTANT: Ta r√©ponse doit √™tre UNIQUEMENT un objet JSON valide, sans texte avant ou apr√®s.
// Format exact de la r√©ponse:
// {
//   "score": <nombre d√©cimal entre 0 et 20>,
//   "feedback": "<texte d√©taill√© expliquant l'√©valuation>",
//   "is_correct": <true ou false>,
//   "suggestions": ["suggestion1", "suggestion2", ...]
// }
// `;
//
//         try {
//             console.log('Envoi de la requ√™te √† DeepSeek...');
//             const responseText = await this.generateResponse(prompt);
//             console.log('R√©ponse re√ßue de DeepSeek:', responseText.substring(0, 100) + '...');
//
//             try {
//                 // Tentative de parse du JSON complet
//                 const cleanedResponse = responseText.trim();
//                 console.log('Tentative de parse JSON sur:', cleanedResponse.substring(0, 100) + '...');
//
//                 const evaluation = JSON.parse(cleanedResponse);
//                 console.log('Parsing JSON r√©ussi:', evaluation);
//
//                 // V√©rification des types et valeurs
//                 if (typeof evaluation.score !== 'number') {
//                     console.error('Le score n\'est pas un nombre:', evaluation.score);
//                     evaluation.score = 0;
//                 }
//
//                 if (typeof evaluation.feedback !== 'string') {
//                     console.error('Le feedback n\'est pas une cha√Æne:', evaluation.feedback);
//                     evaluation.feedback = String(evaluation.feedback);
//                 }
//
//                 // Cr√©ation d'un objet r√©sultat propre
//                 const result = {
//                     score: evaluation.score,
//                     feedback: evaluation.feedback,
//                     is_correct: Boolean(evaluation.is_correct),
//                     suggestions: Array.isArray(evaluation.suggestions) ? evaluation.suggestions : []
//                 };
//
//                 console.log('R√©sultat final:', result);
//                 return result;
//             } catch (parseError) {
//                 console.error('Erreur de parsing JSON:', parseError.message);
//                 console.error('R√©ponse brute compl√®te:', responseText);
//
//                 // Tentative d'extraction avec regex comme fallback
//                 let jsonMatch = responseText.match(/(\{[\s\S]*\})/);
//                 if (jsonMatch) {
//                     console.log('Tentative d\'extraction avec regex:', jsonMatch[0]);
//                     try {
//                         const extractedEvaluation = JSON.parse(jsonMatch[0]);
//                         console.log('Extraction r√©ussie:', extractedEvaluation);
//
//                         return {
//                             score: typeof extractedEvaluation.score === 'number' ? extractedEvaluation.score : 0,
//                             feedback: typeof extractedEvaluation.feedback === 'string' ?
//                                 extractedEvaluation.feedback :
//                                 "Feedback extrait avec m√©thode alternative: " + String(extractedEvaluation.feedback),
//                             is_correct: Boolean(extractedEvaluation.is_correct),
//                             suggestions: Array.isArray(extractedEvaluation.suggestions) ?
//                                 extractedEvaluation.suggestions : []
//                         };
//                     } catch (secondParseError) {
//                         console.error('√âchec de l\'extraction secondaire:', secondParseError.message);
//                     }
//                 }
//
//                 // Fallback en cas d'√©chec complet
//                 return {
//                     score: 0,
//                     feedback: "Erreur lors du traitement de l'√©valuation. La r√©ponse du mod√®le n'√©tait pas au format attendu.",
//                     is_correct: false,
//                     suggestions: []
//                 };
//             }
//         } catch (error) {
//             console.error('Erreur lors de l\'√©valuation avec DeepSeek:', error);
//             return {
//                 score: 0,
//                 feedback: "Erreur lors de l'√©valuation automatique: " + error.message,
//                 is_correct: false,
//                 suggestions: []
//             };
//         }
//     }


    async gradeSubmission(studentQuery, correctSolution, examContent) {
        const prompt = `
Tu es un correcteur expert en **SQL et bases de donn√©es**, sp√©cialis√© dans **l'√©valuation des copies d'examen**.  
Ta mission est de comparer la **r√©ponse soumise par l'√©tudiant** avec **la correction officielle** et **le contexte de l'examen**, afin de lui attribuer une **note juste et p√©dagogique**.

üìå **IMPORTANT :**  
- **Tu dois r√©pondre exclusivement en fran√ßais**.  
- **Ta r√©ponse doit √™tre **pr√©cise et format√©e en JSON strict** (pas de texte en dehors de l'objet JSON).  
- **N'attribue pas 0 automatiquement** sauf si la r√©ponse est vide ou compl√®tement hors sujet.  

üîé **Contexte de l'examen** :
\`\`\`
${examContent}
\`\`\`

üìù **R√©ponse de l'√©tudiant** :
\`\`\`sql
${studentQuery}
\`\`\`

‚úÖ **Correction officielle** :
\`\`\`sql
${correctSolution}
\`\`\`

üìå **Crit√®res de notation** :
1Ô∏è‚É£ **Pertinence** : La requ√™te r√©pond-elle √† la question pos√©e dans l'examen ?  
2Ô∏è‚É£ **Exactitude** : Le r√©sultat est-il identique √† la correction officielle ?  
3Ô∏è‚É£ **Syntaxe SQL** : La requ√™te est-elle correcte et ex√©cutable sans erreur ?  
4Ô∏è‚É£ **Optimisation** : Utilise-t-elle les bonnes pratiques (indexation, jointures, etc.) ?  
5Ô∏è‚É£ **Clart√©** : La requ√™te est-elle bien structur√©e et lisible ?  

üìå **Format JSON attendu (strictement respecter ce format)** :
{
  "score": <nombre entre 0 et 20 (ou selon le bar√®me de l'examen)>,
  "feedback": "<Explication p√©dagogique d√©taill√©e, avec des conseils d'am√©lioration>",
  "is_correct": <true ou false>,
  "suggestions": [
    "Suggestion d√©taill√©e pour am√©liorer la requ√™te",
    "Autre conseil pertinent"
  ]
}

üéØ **Objectif** :  
- Fournir **une correction d√©taill√©e et p√©dagogique** en expliquant **les points forts et les erreurs**.  
- Ne pas p√©naliser fortement si la requ√™te est correcte mais mal optimis√©e, donner plut√¥t un **feedback constructif**.  
- V√©rifier si la requ√™te r√©pond bien **au contexte de l'examen** et pas seulement √† la correction brute.  
`;


        try {
            console.log('Envoi de la requ√™te √† DeepSeek...');
            const responseText = await this.generateResponse(prompt);
            console.log('R√©ponse re√ßue de DeepSeek:', responseText.substring(0, 100) + '...');

            // Nettoyage des balises <think> et autres contenus non JSON
            const cleanResponse = responseText
                .replace(/<think>[\s\S]*?<\/think>/g, '') // Supprime les balises <think> et leur contenu
                .replace(/```json|```/g, '')             // Supprime les marqueurs de code JSON
                .trim();                                 // Supprime les espaces inutiles

            console.log('R√©ponse nettoy√©e:', cleanResponse.substring(0, 100) + '...');

            try {
                // Tentative de parse du JSON nettoy√©
                const evaluation = JSON.parse(cleanResponse);
                console.log('Parsing JSON r√©ussi:', evaluation);

                // V√©rification et normalisation des donn√©es
                const result = {
                    score: typeof evaluation.score === 'number' ? evaluation.score : -1,
                    feedback: typeof evaluation.feedback === 'string' ?
                        evaluation.feedback : String(evaluation.feedback),
                    is_correct: Boolean(evaluation.is_correct),
                    suggestions: Array.isArray(evaluation.suggestions) ? evaluation.suggestions : []
                };

                console.log('R√©sultat final:', result);
                return result;
            } catch (parseError) {
                console.error('Erreur de parsing JSON apr√®s nettoyage:', parseError.message);

                // Extraction avec regex comme fallback
                const jsonRegexPatterns = [
                    /(\{[\s\S]*\})/,           // Regex standard pour capturer le JSON complet
                    /```json([\s\S]*?)```/,     // Capture le JSON entre les backticks markdown
                    /\{[\s\S]*?"score"[\s\S]*?\}/  // Capture un objet JSON contenant "score"
                ];

                for (const pattern of jsonRegexPatterns) {
                    const match = responseText.match(pattern);
                    if (match) {
                        const potentialJson = match[1] || match[0];
                        console.log('Tentative d\'extraction avec regex:', potentialJson.substring(0, 100) + '...');

                        try {
                            const extractedEvaluation = JSON.parse(potentialJson.trim());
                            console.log('Extraction r√©ussie:', extractedEvaluation);

                            return {
                                score: typeof extractedEvaluation.score === 'number' ? extractedEvaluation.score : -1,
                                feedback: typeof extractedEvaluation.feedback === 'string' ?
                                    extractedEvaluation.feedback : String(extractedEvaluation.feedback),
                                is_correct: Boolean(extractedEvaluation.is_correct),
                                suggestions: Array.isArray(extractedEvaluation.suggestions) ?
                                    extractedEvaluation.suggestions : []
                            };
                        } catch (secondParseError) {
                            console.error('√âchec de l\'extraction avec pattern:', secondParseError.message);
                            // Continue avec le prochain pattern
                        }
                    }
                }

                // Dernier recours : recherche de structure JSON partielle
                const scoreMatch = responseText.match(/"score"\s*:\s*(\d+\.?\d*)/);
                const feedbackMatch = responseText.match(/"feedback"\s*:\s*"([^"]+)"/);
                const isCorrectMatch = responseText.match(/"is_correct"\s*:\s*(true|false)/);

                if (scoreMatch) {
                    console.log('Extraction partielle r√©ussie avec score:', scoreMatch[1]);
                    return {
                        score: parseFloat(scoreMatch[1]),
                        feedback: feedbackMatch ? feedbackMatch[1] : "Feedback extrait partiellement",
                        is_correct: isCorrectMatch ? isCorrectMatch[1] === 'true' : false,
                        suggestions: []
                    };
                }

                // Fallback en cas d'√©chec complet
                console.error('Tous les essais de parsing ont √©chou√©');
                return {
                    score: -1,
                    feedback: "Erreur lors du traitement de l'√©valuation. La r√©ponse du mod√®le n'√©tait pas au format JSON attendu.",
                    is_correct: false,
                    suggestions: []
                };
            }
        } catch (error) {
            console.error('Erreur lors de l\'√©valuation avec DeepSeek:', error);
            return {
                score: -1,
                feedback: "Erreur lors de l'√©valuation automatique: " + error.message,
                is_correct: false,
                suggestions: []
            };
        }
    }

    /**
     * Compare les r√©sultats d'ex√©cution de deux requ√™tes SQL
     * @param {object} studentResult - Le r√©sultat de l'ex√©cution de la requ√™te de l'√©tudiant
     * @param {object} expectedResult - Le r√©sultat attendu
     * @returns {Promise<{similarity: number, analysis: string}>} - Analyse de similarit√©
     */
    async compareExecutionResults(studentResult, expectedResult) {
        const prompt = `
Tu es un expert en SQL charg√© de comparer les r√©sultats d'ex√©cution de deux requ√™tes.

R√©sultat de l'√©tudiant:
${JSON.stringify(studentResult, null, 2)}

R√©sultat attendu:
${JSON.stringify(expectedResult, null, 2)}

Compare les deux r√©sultats et fournit:
1. Un pourcentage de similarit√© entre 0 et 100
2. Une analyse des diff√©rences 
3. Pourquoi ces diff√©rences sont importantes ou non

Format de r√©ponse:
{
  "similarity": <nombre entre 0 et 100>,
  "analysis": "<analyse d√©taill√©e>",
  "key_differences": ["diff√©rence1", "diff√©rence2", ...]
}
`;

        try {
            const responseText = await this.generateResponse(prompt);

            // Extraction du JSON de la r√©ponse
            let jsonMatch = responseText.match(/\{[\s\S]*\}/);
            if (!jsonMatch) {
                return {
                    similarity: 0,
                    analysis: "Erreur d'analyse. Format de r√©ponse incorrect.",
                    key_differences: []
                };
            }

            return JSON.parse(jsonMatch[0]);
        } catch (error) {
            console.error('Erreur lors de la comparaison des r√©sultats:', error.message);
            return {
                similarity: 0,
                analysis: "Erreur lors de la comparaison des r√©sultats d'ex√©cution.",
                key_differences: []
            };
        }
    }

    /**
     * G√©n√®re des indices pour aider l'√©tudiant lorsqu'il est bloqu√©
     * @param {string} exerciseDescription - Description de l'exercice
     * @param {string} studentAttempt - Tentative actuelle de l'√©tudiant (peut √™tre vide)
     * @returns {Promise<{hints: string[]}>} - Liste d'indices
     */
    async generateHints(exerciseDescription, studentAttempt = "") {
        const prompt = `
En tant que professeur de SQL, g√©n√®re 3 indices progressifs pour aider un √©tudiant bloqu√© sur cet exercice:

Description de l'exercice:
${exerciseDescription}

${studentAttempt ? `Tentative actuelle de l'√©tudiant:
\`\`\`sql
${studentAttempt}
\`\`\`
` : 'L\'√©tudiant n\'a pas encore fait de tentative.'}

Fournit 3 indices:
- Un premier indice subtil qui oriente vers la bonne direction
- Un deuxi√®me indice plus explicite sur l'approche √† prendre
- Un troisi√®me indice tr√®s sp√©cifique qui donne presque la solution

Format de r√©ponse:
{
  "hints": [
    "<indice1>",
    "<indice2>",
    "<indice3>"
  ]
}
`;

        try {
            const responseText = await this.generateResponse(prompt);

            // Extraction du JSON de la r√©ponse
            let jsonMatch = responseText.match(/\{[\s\S]*\}/);
            if (!jsonMatch) {
                return {
                    hints: ["D√©sol√©, impossible de g√©n√©rer des indices pour le moment."]
                };
            }

            return JSON.parse(jsonMatch[0]);
        } catch (error) {
            console.error('Erreur lors de la g√©n√©ration d\'indices:', error.message);
            return {
                hints: ["D√©sol√©, une erreur est survenue lors de la g√©n√©ration d'indices."]
            };
        }
    }

    /**
     * Explique une erreur SQL sp√©cifique √† l'√©tudiant
     * @param {string} sqlQuery - La requ√™te avec erreur
     * @param {string} errorMessage - Le message d'erreur retourn√©
     * @returns {Promise<{explanation: string, fix_suggestion: string}>} - Explication et suggestion
     */
    async explainError(sqlQuery, errorMessage) {
        const prompt = `
Explique cette erreur SQL √† un √©tudiant de mani√®re p√©dagogique:

Requ√™te SQL:
\`\`\`sql
${sqlQuery}
\`\`\`

Message d'erreur:
${errorMessage}

Fournit:
1. Une explication claire de l'erreur pour un d√©butant
2. La raison probable de cette erreur
3. Une suggestion concr√®te pour corriger le probl√®me

Format de r√©ponse:
{
  "explanation": "<explication d√©taill√©e>",
  "reason": "<raison de l'erreur>",
  "fix_suggestion": "<suggestion de correction>"
}
`;

        try {
            const responseText = await this.generateResponse(prompt);

            // Extraction du JSON de la r√©ponse
            let jsonMatch = responseText.match(/\{[\s\S]*\}/);
            if (!jsonMatch) {
                return {
                    explanation: "D√©sol√©, impossible d'analyser cette erreur pour le moment.",
                    reason: "Erreur inconnue",
                    fix_suggestion: "V√©rifiez la syntaxe de votre requ√™te."
                };
            }

            return JSON.parse(jsonMatch[0]);
        } catch (error) {
            console.error('Erreur lors de l\'explication de l\'erreur SQL:', error.message);
            return {
                explanation: "Une erreur est survenue lors de l'analyse.",
                reason: "Service temporairement indisponible",
                fix_suggestion: "Veuillez r√©essayer plus tard."
            };
        }
    }
}

module.exports = new DeepSeekAI();